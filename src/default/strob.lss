
strob.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000aa  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  00000140  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000879  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000056  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000000d7  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000080  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000bd  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000040  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000b3  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000012  00000000  00000000  00000bf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__vector_5>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea ea       	ldi	r30, 0xAA	; 170
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a3 36       	cpi	r26, 0x63	; 99
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	24 d0       	rcall	.+72     	; 0x9e <main>
  56:	27 c0       	rjmp	.+78     	; 0xa6 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <_Z11SetupTIMER1v>:
}

void SetupTIMER1 (void)
{

	sei();
  5a:	78 94       	sei
     TCCR1B = (1<<CS12);
  5c:	84 e0       	ldi	r24, 0x04	; 4
  5e:	8e bd       	out	0x2e, r24	; 46
     TCNT1 = 65536-50;        
  60:	8e ec       	ldi	r24, 0xCE	; 206
  62:	9f ef       	ldi	r25, 0xFF	; 255
  64:	9d bd       	out	0x2d, r25	; 45
  66:	8c bd       	out	0x2c, r24	; 44
     TIMSK |= (1<<TOIE1); 
  68:	89 b7       	in	r24, 0x39	; 57
  6a:	80 68       	ori	r24, 0x80	; 128
  6c:	89 bf       	out	0x39, r24	; 57
}
  6e:	08 95       	ret

00000070 <__vector_5>:


ISR (TIMER1_OVF_vect)
{
  70:	1f 92       	push	r1
  72:	0f 92       	push	r0
  74:	0f b6       	in	r0, 0x3f	; 63
  76:	0f 92       	push	r0
  78:	11 24       	eor	r1, r1
  7a:	8f 93       	push	r24
  7c:	9f 93       	push	r25

//	INVBIT(PORTB,3);


	// run timer
	TCNT1 = 65536 - 1000; //  31220;
  7e:	88 e1       	ldi	r24, 0x18	; 24
  80:	9c ef       	ldi	r25, 0xFC	; 252
  82:	9d bd       	out	0x2d, r25	; 45
  84:	8c bd       	out	0x2c, r24	; 44
    TCCR1B = (1<<CS12);
  86:	84 e0       	ldi	r24, 0x04	; 4
  88:	8e bd       	out	0x2e, r24	; 46
    TIMSK |= (1<<TOIE1);
  8a:	89 b7       	in	r24, 0x39	; 57
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	89 bf       	out	0x39, r24	; 57


}
  90:	9f 91       	pop	r25
  92:	8f 91       	pop	r24
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti

0000009e <main>:
	checkflag = YES_CHECK;
}
							
int main(){

SetupTIMER1();
  9e:	dd df       	rcall	.-70     	; 0x5a <_Z11SetupTIMER1v>
DDRB = 0b00011111;
  a0:	8f e1       	ldi	r24, 0x1F	; 31
  a2:	87 bb       	out	0x17, r24	; 23
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <main+0x6>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
